Selection Sort:
We select minimums
def selection(n,arr):
    for i in range(0,n-1):
        mini = i
        for j in range(i,n):
            if arr[j]<arr[mini]:
                mini = j
        arr[i],arr[mini]=arr[mini],arr[i]
    return arr
n = int(input())
arr = list(map(int,input().split()))
print(selection(n,arr))
The time complexity is o(n^2) for best,worst,average cases.

Bubble Sort:
Swap the maximum number to the last
def bubble(n,arr):
    for i in range(n-1,0,-1):
        for j in range(0,i):
            if arr[j]>arr[j+1]:
                arr[j],arr[j+1]=arr[j+1],arr[j]
    return arr
n = int(input())
arr = list(map(int,input().split()))
print(bubble(n,arr))
The time complexity is
best case - o(n)
worst,average case = o(n^2)

Insertion sort:
Take an element and place it in its current order
def insertion(n,arr):
    for i in range(0,n+1):
        j=i
        while(j>0 and (arr[j-1]>arr[j])):
            arr[j-1],arr[j] = arr[j],arr[j-1]
            j=j-1
    return arr
n = int(input())
arr = list(map(int,input().split()))
print(insertion(n,arr))
The time complexity is
best case - o(n)
worst,average case = o(n^2)

Merge Sort:
def merges(arr,low,mid,high):
    temp=[]
    left = low
    right = mid+1
    while left<=mid and right<=high:
        if(arr[left]<=arr[right]):
            temp.append(arr[left])
            left+=1
        else:
            temp.append(arr[right])
            right+=1
    while(left<=mid):
        temp.append(arr[left])
        left+=1
    while(right<=high):
        temp.append(arr[right])
        right+=1
    for i in range(low,high+1):
        arr[i]=temp[i-low]
        
def merge(arr,low,high):
    if(low>=high):
        return
    mid = (low+high)//2
    merge(arr,low,mid)
    merge(arr,mid+1,high)
    merges(arr,low,mid,high)

def mergesort(n,arr):
    merge(arr,0,n-1)

n = int(input())
arr = list(map(int,input().split()))
mergesort(n,arr)
print(arr)
The time complexity is o(nlogn)
space complexity in worst case - o(n)

Quick sort:
def partition(arr, low, high):
    pivot = arr[low]
    i = low
    j = high
    while i < j:
        while arr[i] <= pivot and i <= high - 1:
            i += 1
        while arr[j] > pivot and j >= low + 1:
            j -= 1
        if i < j:
            arr[i], arr[j] = arr[j], arr[i]
    arr[low], arr[j] = arr[j], arr[low]
    return j
def qs(arr, low, high):
    if low < high:
        pivot = partition(arr, low, high)
        qs(arr, low, pivot - 1)
        qs(arr, pivot + 1, high)
def quicksort(n, arr):
    qs(arr, 0, n - 1)
n = int(input())
arr = list(map(int, input().split()))
quicksort(n, arr)
print(arr)

The time complexity is o(nlogn)
space complexity in worst case - o(1)

Recursive bubblesort:
def recursivebubble(n,arr):
    if n==1:
        return
    for i in range(n-1):
        if arr[i]>arr[i+1]:
            arr[i],arr[i+1]=arr[i+1],arr[i]
    recursivebubble(n-1,arr)
n = int(input())
arr = list(map(int, input().split()))
recursivebubble(n,arr)
print(arr)

Recursive InsertionSort:
def insertion_sort(arr, i, n):
    if i == n:
        return
    j = i
    while j > 0 and arr[j - 1] > arr[j]:
        arr[j - 1], arr[j] = arr[j], arr[j - 1]
        j -= 1
    insertion_sort(arr, i + 1, n)
n = int(input())
arr = list(map(int, input().split()))
insertion_sort(arr, 1, n)
print(arr)
