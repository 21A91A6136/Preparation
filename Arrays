If we declare array globally then the maximum size of array is 10^7
Otherwise if we declare inside the int mainthen the maximum size of array is 10^6
Topics:
1) Largest element in array - Line 16
2) Second largest element in array without sorting - Line 25
3) Check whether is a sorted - Line 38
4) Remove duplicates from an array - Line 47
5) Left rotate array by one - Line 57
6) Left rotate array by n places - Line 66
7) move zeros to end - Line 80
8) Linear Search - Line 96
9) Union of two arrays - Line 105
10) Intersection of two arrays - Line 133
11) Missing number in array - Line 153

1) Largest element in array:
n = list(map(int,input().split()))
l=n[0]
for i in range(len(n)):
    if n[i]>l:
        l=n[i]
print(l)
The time complexity is o(n)

2) Second largest element in array without sorting:
n = list(map(int,input().split()))
l=n[0]
s=-1
for i in range(len(n)):
    if n[i]>l:
        s=l
        l=n[i]
    elif s<n[i] and n[i]!=l:
            s=n[i]
print(l,s)
The time complexity is o(n), space complexity  is o(1)

3) Check whether is a sorted:
n = list(map(int,input().split()))
for i in range(1,len(n)):
    if n[i]>n[i-1]:
        print(False)
    else:
        print(True)
The time complexity is o(n)

4) Remove duplicates from an array
n = list(map(int,input().split()))
i=0
for j in range(1,len(n)):
    if n[i]!=n[j]:
        n[i+1] = n[j]
        i+=1
print(i+1)
The time complexity is o(n)

5) Left rotate array by one:
n = list(map(int,input().split()))
temp=n[0]
for i in range(1,len(n)):
    n[i-1]=n[i]
n[len(n)-1]=temp
print(n)
The time complexity is o(n) & space complexity is o(n) the extra space is o(1)

6) Left rotate array by n places:
n = list(map(int,input().split()))
d=int(input())
d = d%len(n)
temp=[]
for i in range(d):
    temp.append(n[i])
for i in range(d,len(n)):
    n[i-d]=n[i]
for i in range(len(n)-d,len(n)):
    n[i]=temp[i-(len(n)-d)]
print(n)
The time complexity is o(n) & space complexity is o(d) 

7) move zeros to end:
arr = list(map(int,input().split()))
j=-1
for i in range(len(arr)):
    if arr[i]==0:
        j=i
        break
if j==-1:
    print(arr)
for i in range(j+1,len(arr)):
    if arr[i]!=0:
        arr[i],arr[j]=arr[j],arr[i]
        j+=1
print(arr)
The time complexity is o(n)

8) Linear Search:
arr = list(map(int,input().split()))
n = int(input())
for i in range(len(arr)):
    if arr[i]==n:
        print(i)
        break
The time complexity is o(n)

9) Union of two arrays:
arr1 = list(map(int,input().split()))
arr2 = list(map(int,input().split()))
n1 = len(arr1)
n2 = len(arr2)
uni = []
i=0
j=0
while(i<n1 and j<n2):
    if(arr1[i]<=arr2[j]):
        if(len(uni)==0 or uni[-1]!=arr1[i]):
            uni.append(arr1[i])
        i+=1
    else:
        if(len(uni)==0 or uni[-1]!=arr2[j]):
            uni.append(arr2[j])
        j+=1
while(i<n1):
    if(len(uni)==0 or uni[-1]!=arr1[i]):
        uni.append(arr1[i])
    i+=1
while(j<n2):
    if(len(uni)==0 or uni[-1]!=arr2[j]):
        uni.append(arr2[j])
    j+=1
print(uni)
The time complexity is o(arr1+arr2) & space complexity is o(arr1+arr2) for worst case

10) Intersection of two array:
arr1 = list(map(int,input().split()))
arr2 = list(map(int,input().split()))
n1 = len(arr1)
n2 = len(arr2)
inter = []
i=0
j=0
while(i<n1 and j<n2):
    if(arr1[i]<arr2[j]):
        i+=1
    elif arr2[j]<arr1[i]:
        j+=1
    else:
        inter.append(arr1[i])
        i+=1
        j+=1
print(inter)
The time complexity is o(arr1+arr2) & space complexity is o(arr1+arr2) for worst case

11) Missing number in array:
arr = list(map(int,input().split()))
n=len(arr)+1
s = (n*(n+1))//2
d = 0
for i in arr:
    d+=i
print(s-d)
(or)
arr = list(map(int,input().split()))
n=len(arr)
xor1 = 0
xor2 = 0
for i in range(1,n):
    xor2^=arr[i]
    xor1^=(i+1)
xor1^=n+1
xor1=xor1^xor2
print(xor1)
The time complexity is o(n)
