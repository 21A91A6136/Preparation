Topics:
1) 2 Sum problem - Line 
2) sort 0's 1's 2's in an array(Dutch National Flag algorithm)
3) Majority Element that appears n/2 times (Moore's voting algorithm)
4) Maximum Subarray sum (kadane's algorithm)
5) Buy and sell stock
6) Rearrange array element based on sign
7) Leaders in a array Problem
8) Longest consective sequence
9) Next Permutation

1) 2 Sum problem
arr = list(map(int,input().split()))
k = int(input())
n = len(arr)
arr =sorted(arr)
left = 0
right = n-1
sums = 0
while left<right:
    sums = arr[left]+arr[right]
    if sums==k:
        print("YES")
        break
    elif sums<k:
        left+=1
    else:
        right-=1
The time complexity is o(n) + o(nlogn)

2) Sort 0's 1's 2's in an array (Dutch National Flag algorithm)
arr = list(map(int,input().split()))
low= 0
mid = 0
high = len(arr)-1
while(mid<=high):
    if arr[mid]==0:
        arr[low],arr[mid]=arr[mid],arr[low]
        low+=1
        mid+=1
    elif arr[mid]==1:
        mid+=1
    else:
        arr[mid],arr[high] = arr[high],arr[mid]
        high-=1
print(arr)
The time complexity is o(n),space complexity is o(1)

3) Majority Element that appears n/2 times (Moore's voting algorithm)
arr = list(map(int,input().split()))
c = 0
el = 0
for i in range(len(arr)):
    if c==0:
        c=1
        el = arr[i]
    elif arr[i]==el:
        c+=1
    else:
        c-=1
c1=0
for i in range(len(arr)):
    if arr[i]==el:
        c1+=1
if c1>len(arr)//2:
    print(el)
else:
    print(-1)
The time complexity is o(n) + (o(n) if exists majority element) 

4) Maximum subarray sum (Kadane's sum)
arr = list(map(int,input().split()))
n = len(arr)
maxi = float('-inf')
current_sum = 0
for i in range(n):
    current_sum += arr[i]
    if current_sum > maxi:
        maxi = current_sum
    if current_sum < 0:
        current_sum = 0
print(maxi)
The time complexity is o(n), space complexity is o(1)

5) Buy and sell stock
arr = list(map(int,input().split()))
p=0
mini = arr[0]
for i in range(1,len(arr)):
    cost = arr[i]-mini
    p=max(p,cost)
    mini = min(mini,arr[i])
print(p)
The time complexity is o(n)

6) Rearrange array elements based on sign
arr = list(map(int,input().split()))
c = [0]*len(arr)
p = 0
neg = 1
for i in range(len(arr)):
    if arr[i] < 0:
        if neg < len(c):
            c[neg] = arr[i]
            neg += 2
    else:
        if p < len(c):
            c[p] = arr[i]
            p += 2
print(c)

7) Leaders in a array problem
arr = list(map(int,input().split()))
c=[]
maxi = -2**31
for i in range(len(arr)-1,-1,-1):
    if arr[i]>maxi:
        c.append(arr[i])
    maxi = max(maxi,arr[i])
print(c[::-1])

8) Longest consective sequence
arr = list(map(int,input().split()))
arr = set(arr)
longest = 1
for i in arr:
    if i-1 not in arr:
        cnt = 1
        val = i
        while(val+1 in arr):
            val+=1
            cnt+=1
        longest = max(longest,cnt)
print(longest)

9) Next Permutation
arr = list(map(int,input().split()))
n = len(arr)
ind = -1
for i in range(n-2,-1,-1):
    if arr[i]<arr[i+1]:
        ind = i
        break
if ind==-1:
    print(arr[::-1])
else:
    for i in range(n-1,ind,-1):
        if arr[i]>arr[ind]:
            arr[i],arr[ind] = arr[ind],arr[i]
            break
    fi_p = arr[:ind+1]
    sec_p = arr[ind+1:]
    print(fi_p+sec_p[::-1])
