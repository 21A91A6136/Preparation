A node contains atmost 2 child nodes

Lecture - 1
class Node:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def display(root):
    if root is None:
        return
    #preorder
    print(root.val)
    display(root.left)
    display(root.right)

    #Inorder
    # display(root.left)
    # print(root.val)
    # display(root.right)

    #Postorder
    # display(root.left)
    # display(root.right)
    # print(root.val)

def size(root):
    if root is None:
        return 0
    return 1+size(root.left)+size(root.right)
def main():
    a = Node(10)
    b = Node(20)
    c = Node(30)
    d = Node(40)
    e = Node(50)
    f = Node(60)
    g = Node(70)
    a.left = b
    a.right = c
    b.left = d
    # b.right = e
    c.left = f
    c.right = g
    h = Node(80)
    i = Node(90)
    f.left = h 
    f.right = i
    # display(a)  # Call the display function to print tree values
    # print(size(a))
    print(maximum(a))
if __name__ == "__main__":
    main()

Lecture - 2 
Maximum value from BT:
def maximum(root):
    if root is not None:
        return max(root.val,maximum(root.left),maximum(root.right))
    return 0

Minimum value from BT:
def minimum(root):
    if root is not None:
        return min(root.val,maximum(root.left),maximum(root.right))
    return 0

Sum of nodes in BT
def sum(root):
    if root is not None:
        return root.val+sum(root.left)+sum(root.right)
    return 0

Product of nodes in BT
def prod(root):
    if root is not None and root.val!=0:
        return root.val*prod(root.left)*prod(root.right)
    return 1
