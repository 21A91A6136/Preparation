A node contains atmost 2 child nodes

Lecture - 1
class Node:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def display(root):
    if root is None:
        return
    #preorder
    print(root.val)
    display(root.left)
    display(root.right)

    #Inorder
    # display(root.left)
    # print(root.val)
    # display(root.right)

    #Postorder
    # display(root.left)
    # display(root.right)
    # print(root.val)

def size(root):
    if root is None:
        return 0
    return 1+size(root.left)+size(root.right)
def main():
    a = Node(10)
    b = Node(20)
    c = Node(30)
    d = Node(40)
    e = Node(50)
    f = Node(60)
    g = Node(70)
    a.left = b
    a.right = c
    b.left = d
    # b.right = e
    c.left = f
    c.right = g
    h = Node(80)
    i = Node(90)
    f.left = h 
    f.right = i
    # display(a)  # Call the display function to print tree values
    # print(size(a))
    print(maximum(a))
if __name__ == "__main__":
    main()

Lecture - 2 
Maximum value from BT:
def maximum(root):
    if root is not None:
        return max(root.val,max(maximum(root.left),maximum(root.right)))
    return 0
(or)
def maximum(root):
    if root is None:
        return 0
    left_max = display(root.left)
    right_max = display(root.right)
    if left_max>right_max:
        temp_max = left_max
    else:
        temp_max = right_max
    if root.val>temp_max:
        return root.val
    else:
        return temp_max

Minimum value from BT:
def minimum(root):
    if root is not None:
        return min(root.val,min(minimum(root.left),minimum(root.right)))
    return 0
(or)
def minimum(root):
    if root is None:
        return float('inf') 
    left_min = display(root.left)
    right_min = display(root.right)
    if left_min < right_min:
        temp_min = left_min
    else:
        temp_min = right_min
    if root.val < temp_min:
        return root.val
    else:
        return temp_min

Sum of nodes in BT
def sum(root):
    if root is not None:
        return root.val+sum(root.left)+sum(root.right)
    return 0
(or)
def sum_of_nodes(root):
    if root is None:
        return 0
    left_sum = display(root.left)
    right_sum = display(root.right)

    total = root.val + left_sum + right_sum
    return total

Product of nodes in BT
def prod(root):
    if root is not None and root.val!=0:
        return root.val*prod(root.left)*prod(root.right)
    return 1
(or)
def product(root):
    if root is None:
        return 1
    left_sum = display(root.left)
    right_sum = display(root.right)

    total = root.val * left_sum * right_sum
    return total

Height of BT:
def levels(root):
    if root is None:
        return 0
    return 1+max(levels(root.left),levels(root.right))

Level order Traversal
from collections import deque
class Node:
    def __init__(self, val):
        self.left = None
        self.right = None
        self.root = val
def levelOrder(root):
    if root is None:
        return
    q=deque()
    q.append(root)
    while q:
        node = q.popleft()
        print(node.root,end=" ")
        if node.left:
            q.append(node.left)
        if node.right:
            q.append(node.right)
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left = Node(6)
root.right.right = Node(7)
levels(root)
# levelOrder(root)

