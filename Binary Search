Binary Search - It is a searching algorithm with a limited search space
it is sorted as well
example: consider a word "help"
so we will find the word help in each and every page of dictionary until it is found
another way splitting the dictionary pages and checking based on alphabet either in left side or right side

1. Basic Binary search code
2. Recursive Binary search
3. Lower Bound Algorithm
4. Upper Bound Algorithm
5. Search Insert position
6. Floor and ceil 
7. Find first and last occurence of element in sorted array
8. Count no of occurences of a element
9. Search element in rotated array - I
10. Search element in rotated array - II
11. Minimum in Rotated sorted array

1. Basic Code:
arr = list(map(int,input().split()))
target  = int(input())
n= len(arr)
low = 0
high = n-1
while low<=high:
    mid = (low+high)//2
    if arr[mid]==target:
        print(mid)
    elif target>arr[mid]:
        low = mid+1
    else:
        high = mid-1
print(-1)

2. Recursive Binary search:
def binarysearch(arr,low,high,target):
    if low>high:
        return -1
    mid = (low+high)//2
    if arr[mid]==target:
        return mid
    elif target>arr[mid]:
        return binarysearch(arr,mid+1,high,target)
    else:
        return binarysearch(arr,low,mid-1,target)
        
arr = list(map(int,input().split()))
target  = int(input())
n= len(arr)
low = 0
high = n-1
print(binarysearch(arr,low,high,target))

3. Lower Bound Algorithm
arr = list(map(int,input().split()))
target  = int(input())
n= len(arr)
low = 0
high = n-1
ans = n
while low<=high:
    mid = (low+high)//2
    if arr[mid]>=x:
        ans = mid
        high = mid-1
    else:
        low = mid+1
print(ans)

4. Upper Bound algorithm
arr = list(map(int,input().split()))
target  = int(input())
n= len(arr)
low = 0
high = n-1
ans = n
while low<=high:
    mid = (low+high)//2
    if arr[mid]>x:
        ans = mid
        high = mid-1
    else:
        low = mid+1
print(ans)

5. Search Insert position
arr = list(map(int,input().split()))
target  = int(input())
n= len(arr)
low = 0
high = n-1
ans = n
while low<=high:
    mid = (low+high)//2
    if arr[mid]>=x:
        ans = mid
        high = mid-1
    else:
        low = mid+1
print(ans)

6. Floor and ceil
Floor:
arr = list(map(int,input().split()))
target  = int(input())
n= len(arr)
low = 0
high = n-1
ans = n
while low<=high:
    mid = (low+high)//2
    if arr[mid]<=x:
        ans = arr[mid]
       low = mid+1
    else:
        high = mid-1
print(ans)

ceil:
arr = list(map(int,input().split()))
target  = int(input())
n= len(arr)
low = 0
high = n-1
ans = -1
while low<=high:
    mid = (low+high)//2
    if arr[mid]>=x:
        ans = mid
        high = mid-1
    else:
        low = mid+1
print(ans)

7. Find first and last occurence of element in sorted array
def lower(arr,x,n):
    low = 0
    high = n-1
    first = -1
    while(low<=high):
        mid = (low+high)//2
        if arr[mid]==x:
            first = mid
            high = mid-1
        elif arr[mid]<x:
            low=mid+1
        else:
            high = mid-1
    return first
def upper(arr,x,n):
    low = 0
    high = n-1
    last = -1
    while(low<=high):
        mid = (low+high)//2
        if arr[mid]==x:
            last = mid
            low = mid+1
        elif arr[mid]<x:
            low=mid+1
        else:
            high = mid-1
    return last
def fandl(arr,x,n):
    first = lower(arr,x,n)
    if first==-1:
        return {-1,-1}
    last = upper(arr,x,n)
    return first,last
arr = list(map(int,input().split()))
x = int(input())
n = len(arr)
print(fandl(arr,x,n))

8. Count no of occurences of a element
def lower(arr,x,n):
    low = 0
    high = n-1
    first = -1
    while(low<=high):
        mid = (low+high)//2
        if arr[mid]==x:
            first = mid
            high = mid-1
        elif arr[mid]<x:
            low=mid+1
        else:
            high = mid-1
    return first
def upper(arr,x,n):
    low = 0
    high = n-1
    last = -1
    while(low<=high):
        mid = (low+high)//2
        if arr[mid]==x:
            last = mid
            low = mid+1
        elif arr[mid]<x:
            low=mid+1
        else:
            high = mid-1
    return last
def fandl(arr,x,n):
    first = lower(arr,x,n)
    if first==-1:
        return {-1,-1}
    last = upper(arr,x,n)
    return first,last
def count(arr,x,n):
    first,last = fandl(arr,x,n)
    if first==-1:
        return 0
    else:
        return last-first+1
arr = list(map(int,input().split()))
x = int(input())
n = len(arr)
print(count(arr,x,n))

9. Search element in rotated array - I
arr = list(map(int,input().split()))
target = int(input())
low = 0
high = len(arr)-1
while(low<=high):
    mid = (low+high)//2
    if(arr[mid]==target):
        print(mid)
        break
    if(arr[low]<=arr[mid]):
        if(arr[low]<=target and target<=arr[mid]):
            high = mid-1
        else:
            low = mid+1
    else:
        if(arr[mid]<=target and target<=arr[high]):
            low = mid+1
        else:
            high = mid-1
else:
    print(-1)

10. Search element in rotated array - II
arr = list(map(int,input().split()))
target = int(input())
low = 0
high = len(arr)-1
while(low<=high):
    mid = (low+high)//2
    if(arr[mid]==target):
        print(mid)
        break
    if(arr[low]==arr[mid] and arr[mid]==arr[high]):
        low = low+1
        high = high-1
        continue
    if(arr[low]<=arr[mid]):
        if(arr[low]<=target and target<=arr[mid]):
            high = mid-1
        else:
            low = mid+1
    else:
        if(arr[mid]<=target and target<=arr[high]):
            low = mid+1
        else:
            high = mid-1
else:
    print(-1)

11. Minimum in Rotated Sorted Array
arr = list(map(int,input().split()))
low = 0
high = len(arr)-1
ans = float('inf')
while(low<=high):
    mid = (low+high)//2
    if(arr[low]<=arr[high]):
        ans = min(ans,arr[low])
        break
    if(arr[low]<=arr[mid]):
        ans = min(ans,arr[low])
        low = mid+1
    else:
        ans = min(ans,arr[mid])
        high = mid-1
print(ans)
